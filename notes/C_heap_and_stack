http://blog.csdn.net/bonny95/article/details/2835447

C语言函数中定义大数组耗尽堆栈的问题
分类： C/C++ 2008-08-26 23:22 3820人阅读 评论(3) 收藏 举报
语言c汇编linuxgcc平台
今晚上一同学请我帮忙看一个C程序，GCC编译时一直抱错，说是段错误。
程序本身写的比较差，但编译能通过，只是有几十个警告。
两个小时过去了，在Eclipse+GCC下没有找到问题（这个环境还不熟悉），换到了VC下面，逐步调试，才发现问题出在被main调用的一个叫做readmctal()的函数的前面几行中。该函数如下：

    void readmctal(void)
    {
        int number,count,sign,num_tally,nflag;
        int ncell,nstep,mstep,sum;
        char *(str_temp[80]);
        float temp_spectra[num_cell][egroup],temp_error[num_cell][egroup];
    float temp_flux[num_cell],temp_flux_error[num_cell];
        int total_cell_no[num_cell];
        sum=0;  
        number=0;
        /* open the mctal file */
        if ((fpt_mc=fopen("mctal","r"))==NULL){
            printf("/nERROR - Cannot open mctal file/n");
            exit(1);
        }
        else
        {
            printf("File mctal opened.../n");
        }
        ......

同时

    # define num_cell 9999
    # define egroup 175


定义的二位数组实在是太大了。看了反汇编之后感觉貌似是堆栈的问题，试着将
float temp_spectra[num_cell][egroup],temp_error[num_cell][egroup];
float temp_flux[num_cell],temp_flux_error[num_cell];
移动到函数体外，大功告成！
到Linux下用GCC编译，“段错误”的提示消失了。

经过分析，我认为一个函数分配的内存是有限的，在函数体内定义的二维数组太大了，耗尽了堆栈，因此报错。

PS：论坛达人的观点：
养成良好的编程习惯，一般公司都有coding style，里面应该有规定：
函数内部(局部变量)禁止定义大数组，而应使用动态内存；如数组需传入函数应使用指针作为参数；
其实就算你调用这个函数不出错，但是如果函数嵌套很多的话也会发生segment error
在某些资源有限的系统下，更需要注意这个问题，比如51单片机

函数内是在栈分配内存，栈大小一般限制在1M到2M
函数外则是全局变量，在DATA段分配内存



PSPS：转一篇关于C内存分配的文章，原文链接：http://www.lupaworld.com/bbs/viewthread.php?tid=29577
浅谈C内存分配
很早之前写的了，现在发到C版来。

关于C语言内存方面的话题要真说起来的话那恐怕就没头了，所以本文仅仅是一个浅谈。
关于内存问题不同平台之间有一定的区别。本文所指的平台是x86的Linux平台
用C语言做程序（其实其他语言也一样），不仅要熟悉语法，其实很多相关的背景知识也很重要。在学习和研究C语言中内存分配的问题前，首先要了解一下Linux分配给进程（运行中的程序）的地址空间是什么样的。
总的来说有3个段，即代码段，数据段和堆栈段（学过汇编的朋友一定很熟悉了）。代码段就是存储程序文本的，所以有时候也叫做文本段，指令指针中的指令就是 从这里取得。这个段一般是可以被共享的，比如你在Linux开了2个Vi来编辑文本，那么一般来说这两个Vi是共享一个代码段的，但是数据段不同（这点有 点类似C++中类的不同对象共享相同成员函数）。数据段是存储数据用的，还可以分成初始化为非零的数据区，BSS，和堆(Heap)三个区域。初始化非零 数据区域一般存放静态非零数据和全局的非零数据。BSS是Block Started by Symbol的缩写，原本是汇编语言中的术语。该区域主要存放未初始化的全局数据和静态数据。还有就是堆了，这个区域是给动态分配内存是使用的，也就是用 malloc等函数分配的内存就是在这个区域里的。它的地址是向上增长的。最后一个堆栈段（注意，堆栈是Stack,堆是Heap，不是同一个东西），堆 栈可太重要了，这里存放着局部变量和函数参数等数据。例如递归算法就是靠栈实现的。栈的地址是向下增长的。具体如下：
========高地址     =======
程序栈             堆栈段
         向下增长
“空洞”           =======
         向上增长
堆
------             数据段
BSS
------
非零数据
=========低地址    =======
=========          =======
代码               代码段
=========          =======
需要注意的是，代码段和数据段之间有明确的分隔，但是数据段和堆栈段之间没有，而且栈是向下增长，堆是向上增长的，因此理论上来说堆和栈会“增长到一起”，但是操作系统会防止这样的错误发生，所以不用过分担心。
有了以上理论做铺垫，下面就说动态内存的分配。上面说了，动态内存空间是在堆中分配的。实现动态分配的也就是下面几个函数：
stdlib.h ：
void *malloc(size_t size);
void *calloc(size_t nmemb, size_t size);
void *realloc(void *ptr, size_t size);
void free(void *ptr);
一个一个说吧。malloc就是分配一个size大小的内存空间，并且用一个void类型的指针指向这个空间，然后返回这个指针。也就是说，malloc 返回了一个指向size大小的空间的void类型的指针，如果要使用这个空间，还得把void*类型转换成一个你需要的类型，比如int*之类。 calloc和malloc基本一样，不同的是有两点，一是calloc分配的空间大小是由nmemb*size决定的，也就是说nmemb是条目个数， 而size可以看成是条目的大小，计算总空间任务由calloc去做。二是calloc返回的空间都用0填充，而malloc则不确定内存中会有什么东 西。realloc是用来改变已经分配的空间的大小。指针ptr是void类型的，它应该指向一个需要重新分配大小的空间，而size参数则是重新分配之 后的整个空间大小，而不是增加的大小。同样，返回的是一个指向新空间的指针。free用来释放由上面3个函数分配的空间，其参数就是指向某空间的指针。
基本就这些了，这些都是比较基础的话题，高级话题和细节问题还有很多，这里就不进行说明了，有机会我会继续总结一番的