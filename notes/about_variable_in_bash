1、首先要了解下.bashrc这个文件：
在home 目录下，运行ls .bash*
将看到这些文件：
.bash_history ：记录了您以前输入的命令，
.bash_logout ：当您退出 shell 时，要执行的命令，
.bash_profile ：当您登入 shell 时，要执行的命令，//我的是ubuntu10.10，没有这个文件；
.bashrc ：每次打开新的 shell 时，要执行的命令。
请注意后两个的区别：‘.bash_profile’只在会话开始时被读取一次，而‘.bashrc’则每次打开新的终端（如新的 xterm 窗口）时，都要被读取。按照传统，您得将定义的变量，如 PATH ，放到‘.bash_profile’中，而象 aliases（别名）和函数之类，则放在‘.bashrc’。但由于‘.bash_profile’经常被设置成先读取‘.bashrc’的内容，您如果图省事的话，就把所有配置都放进‘.bashrc’。
这些文件是每一位用户的设置。系统级的设置存储在‘/etc/profile’、‘/etc/bashrc’及目录‘/etc /profile.d’下的文件中。但您得习惯用各自的配置文件：编辑不需要‘root’权限，还可以使您的设置更有个性。当系统级与用户级的设置发生冲 突时，将采用用户的设置。
读取‘.bashrc’的内容，您如果要省点事的话，就把您所有的配置都放进‘.bashrc’。
上面的这些文件是每位用户的设置，系统级的设置存储在‘/etc/profile’、‘/etc/bashrc’及目录‘ /etc/profile.d’下的文件中。您最好习惯使用各自的配置文件：编辑不需要‘root’权限，还可以使您的设置更具个性。当系统级与用户级的 设置发生冲突时，将优先采用用户的设置。
 提示符
每次当您打开一个控制台(console)或 xterm 时，最先看到的就是提示符(prompt)，类似于：
account@hostname ~ $
在默认设置下，提示符将显示您的用户名、主机名（默认是‘localhost’）、当前所在目录（在 Unix 中，‘~’表示您的 home 目录）。
按照传统，最后一个字符可以标识您是普通用户（$），还是‘root’（#）。
您可以通过 $PS1 变量来设置提示符。命令
echo $PS1
将显示当前的设定。其中可用字符的含义在 man bash 的‘PROMPTING’部分有说明。
如何才能完成理想的设置呢？对于健忘的初学者来讲，默认设定有些不友好，因为提示符只显示当前目录的最后一部分。如果您看到象这样的提示符
tom@localhost bin $
您的当前目录可能是‘/bin’、‘/usr/bin’、‘/usr/local/bin’及‘/usr/X11R6/bin’。当然，您可以用
pwd （输出当前目录，print working directory）
能不能叫 shell 自动告诉您当前目录呢？
当然可以。这里我将提到的设定，包括提示符，大都包含在文件‘/etc/bashrc’中。您可以通过编辑各自 home 目录下的‘.bash_profile’和‘.bashrc’来改变设置。
在 man bash 中的‘PROMPTING’部分，对这些参数(parameter)有详细说明。您可以加入一些小玩意，如不同格式的当前时间，命令的历史记录号，甚至不同的颜色。
在‘~/.bashrc’中，我喜欢的设定是：//具体什么意思我也不太清楚
PS1="\[\033[1m\][\w]\[\033[0m\] "
‘root’在‘~/.bashrc’中的设定 是：
PS1="\[\033[0;31m\][\w]\[\033[0m\] "
这样我得到的提示符就是：
[/usr/bin]
当用‘root’时，变成：
[/usr/bin]
我已经除掉了主机名和用户名，因为我用不着这些。但我首先想一眼就能看出我的身份是普通用户还是‘root’。注意到，普通用户的提示符可以是黑底白字，或白底黑字。
要在终端上获得恰当的颜色调配， 您可以下载 这个脚本 ，赋予执行权限（chmod +x color），然后再运行。
一种更适当的设定：
PS1="\u: \w\\$ "
这样，提示符就变成：
user_name: /usr/bin$
您可以通过命令 export 来测试不同的设置（比如，export PS1="\u: \w\\$ "）。如果找到了适合的提示符，就将设置放到您的‘.bashrc'’中。这样，每次打开控制台或终端窗口时，都会生效。
您甚至可以给提示符设定主题(theme)，也就是搭配不同的颜色，使其看起来象很棒的 ol 的 C64 提示符。如果您对此感兴趣，可以看一下 Bashish 。
 改变 $PATH
‘$PATH’与‘$PS1’一样，也是环境变量。输入
set
将列出所有当前定义的环境变量。
您看到的这些环境变量在 shell 的配置文件中定义，可能是用户自己的配置文件，也可能是由‘root’通过‘/etc’下面的系统级文件定义的。如果您使用 X ，更多的一些变量将由 X 、您的窗口管理器或桌面环境的启动文件配置。
如果对这些设置不很清楚，您暂时最好不要随便改动。了解如何改变 $PATH 变量很有用，因为这个变量决定了 shell 将到哪些目录中寻找命令或程序。如果要执行的命令的目录在 $PATH 中，您就不必输入这个命令的完整路径，直接输入命令就可以了。一些第三方软件没有将可执行文件放到 Linux 的标准目录中。因此，将这些非标准的安装目录添加到 $PATH 是一种解决的办法。此外，您也将看到如何处理一般的环境变量。
首先，作为惯例，所有环境变量名都是大写。由于 Linux 区分大小写，这点您要留意。当然，您可以自己定义一些变量，如‘$path’、‘$pAtH’，但 shell 不会理睬这些变量。
第二点是变量名有时候以‘$’开头，但有时又不是。当设置一个变量时，您直接用名称，而不需要加‘$’：
PATH=/usr/bin:/bin:/usr/local/bin:/usr/X11R6/bin
要获取变量值的话，就要在变量名前加‘$’：
echo $PATH
/usr/bin:/bin:/usr/local/bin:/usr/X11R6/bin
否则的话，变量名就会被当作普通文本了：
echo PATH
PATH
处理 $PATH 变量要注意的第三点是：您不能只替换变量，而是要将新的字符串添加到原来的值中。在大多数情况下，您不能用‘PATH=/some/directory’，因为这将删除 $PATH 中其他的所有目录，这样您在该终端运行程序时，就不得不给出完整路径。所以，只能作添加：
PATH=$PATH:/some/directory
这样，PATH 被设成当前的值（以 $PATH 来表示）＋新添的目录。
到目前为止，您只为当前终端设置了新的 $PATH 变量。如果您打开一个新的终端，运行 将返回旧的 $PATH 值，而看不到您刚才添加的新目录。因为您先前定义的是一个局部环境变量（仅限于当前的终端）。
要定义一个全局变量，使在以后打开的终端中生效，您需要将局部变量输出(export)，可以用‘export’命令：
export PATH=$PATH:/some/directory
现在如果您打开一个新的终端，输入 echo $PATH ，也能看到新设置的 $PATH 了。请注意，命令‘export’只能改变当前终端及以后运行的终端里的变量。对于已经运行的终端没有作用。
为了将目录永久添加到您的 $PATH ，只要将‘export’的那行添加到您的‘.bash_profile’文件中。
请不要在‘.bashrc’中设置 PATH ，否则会导致 PATH 中目录的意外增长。您每次打开一个新的 shell ，‘.bashrc’都会作用。所以如果在该文件中添加目录，您每次打开一个终端，目录又会被添加。这将导致 PATH 变量由于目录复制，不断地增长。
2、接下来就是了解下.bashrc 与 profile 的区别：
要搞清bashrc与profile的区别，首先要弄明白什么是交互式shell和非交互式shell，什么是login shell 和non-login shell。
交互式模式就是shell等待你的输入，并且执行你提交的命令。这种模式被称作交互式是因为shell与用户进行交互。这种模式也是大多数用户非常熟悉的：登录、执行一些命令、签退。当你签退后，shell也终止了。 shell也可以运行在另外一种模式：非交互式模式。在这种模式下，shell不与你进行交互，而是读取存放在文件中的命令,并且执行它们。当它读到文件的结尾，shell也就终止了。
bashrc与profile都用于保存用户的环境信息，bashrc用于交互式non-loginshell，而profile用于交互式login shell。系统中存在许多bashrc和profile文件，下面逐一介绍：
/etc/pro此文件为系统的每个用户设置环境信息,当第一个用户登录时,该文件被执行.
并从/etc/profile.d目录的配置文件中搜集shell的设置.
/etc/bashrc:为每一个运行bash shell的用户执行此文件.当bash shell被打开时,该文件被读取。有些linux版本中的/etc目录下已经没有了bashrc文件。
~/. pro每个用户都可使用该文件输入专用于自己使用的shell信息,当用户登录时,该
文件仅仅执行一次!默认情况下,它设置一些环境变量,然后执行用户的.bashrc文件.
~/.bashrc:该文件包含专用于某个用户的bash shell的bash信息,当该用户登录时以及每次打开新的shell时,该文件被读取.
另外,/etc/profile中设定的变量(全局)的可以作用于任何用户,而~/.bashrc等中设定的变量(局部)只能继承/etc/profile中的变量,他们是"父子"关系.

3、最后就是具体如何设置编辑器的路径问题了：
在Linux里设置环境变量的方法（export PATH）
一般来说，配置交叉编译工具链的时候需要指定编译工具的路径，此时就需要设置 环境变量。例如我的mips-linux-gcc编译器在“/opt/au1200_rm/build_tools/bin”目录 下，build_tools就是我的编译工具，则有如下三种方法来设置环境变量：

1、直接用export命令：
#export PATH=$PATH:/opt/au1200_rm/build_tools/bin
查看是否已经设好，可用命令export查看：
[root@localhost bin]# export
declare -x BASH_ENV="/root/.bashrc"
declare -x G_BROKEN_FILENAMES="1"
declare -x HISTSIZE="1000"
declare -x HOME="/root"
declare -x HOSTNAME="localhost.localdomain"
declare -x INPUTRC="/etc/inputrc"
declare -x LANG="zh_CN.GB18030"
declare -x LANGUAGE="zh_CN.GB18030:zh_CN.GB2312:zh_CN"
declare -x LESSOPEN="|/usr/bin/lesspipe.sh %s"
declare -x LOGNAME="root"
declare -x LS_COLORS="no=00:fi=00:di=01;34:ln=01;36:pi=40;33:so=01;35:bd=40;33;01:cd=40;33;01:or=01;05;37;41:mi=01;05;37;41:ex=01;32:*.cmd=01;32:*.exe=01;32:*.com=01;32:*.btm=01;32:*.bat=01;32:*.sh=01;32:*.csh=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.gz=01;31:*.bz2=01;31:*.bz=01;31:*.tz=01;31:*.rpm=01;31:*.cpio=01;31:*.jpg=01;35:*.gif=01;35:*.bmp=01;35:*.xbm=01;35:*.xpm=01;35:*.png=01;35:*.tif=01;35:"
declare -x MAIL="/var/spool/mail/root"
declare -x OLDPWD="/opt/au1200_rm/build_tools"
declare -x PATH="/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/usr/X11R6/bin:/root/bin:/opt/au1200_rm/build_tools/bin"
declare -x PWD="/opt/au1200_rm/build_tools/bin"
declare -x SHELL="/bin/bash"
declare -x SHLVL="1"
declare -x SSH_ASKPASS="/usr/libexec/openssh/gnome-ssh-askpass"
declare -x SSH_AUTH_SOCK="/tmp/ssh-XX3LKWhz/agent.4242"
declare -x SSH_CLIENT="10.3.37.152 2236 22"
declare -x SSH_CONNECTION="10.3.37.152 2236 10.3.37.186 22"
declare -x SSH_TTY="/dev/pts/2"
declare -x TERM="linux"
declare -x USER="root"
declare -x USERNAME="root"
可以看到，环境变量已经设好，PATH里面已经有了我要加的编译器的路径。

2、修改profile文件： 
#vi /etc/profile 
在里面加入:
export PATH="$PATH:/opt/au1200_rm/build_tools/bin"

3. 修改.bashrc文件：
# vi /root/.bashrc
在里面加入：
export PATH="$PATH:/opt/au1200_rm/build_tools/bin"

后两种方法一般需要重新注销系统才能生效，最后可以通过echo命令测试一下：
# echo $PATH
看看输出里面是不是已经有了/my_new_path这个路径了。
-----------------------------------------------------------------------------------------------------------------------
　“/bin”、“/sbin”、“/usr/bin”、“/usr/sbin”、“/usr/local/bin”等路径已经在系统环境变量中了，如果可执行文件在这几个标准位置，在终端命令行输入该软件可执行文件的文件名和参数(如果需要参数)，回车即可。
　　如果不在标准位置，文件名前面需要加上完整的路径。不过每次都这样跑就太麻烦了，一个“一劳永逸”的办法是把这个路径加入环境变量。命令 “PATH=$PATH:路径”可以把这个路径加入环境变量，但是退出这个命令行就失效了。要想永久生效，需要把这行添加到环境变量文件里。有两个文件可 选：“/etc/profile”和用户主目录下的“.bash_profile”，“/etc/profile”对系统里所有用户都有效，用户主目录下 的“.bash_profile”只对这个用户有效。
　　“PATH=$PATH:路径1:路径2:...:路径n”，意思是可执行文件的路径包括原先设定的路径，也包括从“路径1”到“路径n”的所 有路径。当用户输入一个一串字符并按回车后，shell会依次在这些路径里找对应的可执行文件并交给系统核心执行。那个“$PATH”表示原先设定的路径 仍然有效，注意不要漏掉。某些软件可能还有“PATH”以外类型的环境变量需要添加，但方法与此相同，并且也需要注意“$”。
　　注意，与DOS/Window不同，UNIX类系统环境变量中路径名用冒号分隔，不是分号。另外，软件越装越多，环境变量越添越多，为了避免造成混乱，建议所有语句都添加在文件结尾，按软件的安装顺序添加。
　　格式如下()：
　　# 软件名-版本号
　　PATH=$PATH:路径1:路径2:...:路径n
　　其他环境变量=$其他环境变量:...
　　在“profile”和“.bash_profile”中，“#”是注释符号，写在这里除了视觉分隔外没有任何效果。
　　设置完毕，注销并重新登录，设置就生效了。如果不注销，直接在shell里执行这些语句，也能生效，但是作用范围只限于执行了这些语句的shell。
　　相关的环境变量生效后，就不必老跑到软件的可执行文件目录里去操作了。
只是简单的整理下，不过我参考了很多资料的，很辛苦的～
